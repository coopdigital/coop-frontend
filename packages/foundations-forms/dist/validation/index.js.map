{"version":3,"sources":["../../src/validation/index.mjs"],"names":["validate","field","fieldset","invalid","required","disabled","setCustomValidity","validity","customError","validateGroup","fieldMap","fields","Array","from","keys","isCheckable","some","hasValue","forEach","isValid","reverse","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAQA;;AAkEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;AACA;AACA;AACA;AACO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,SAAoCC,QAApC,EAAiD;AAAA,gCAAjB,EAAiB;AAAA,MAAvCC,OAAuC,QAAvCA,OAAuC;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;;AACvE,uBAASH,KAAT,EADuE,CAGvE;;AACA,MAAI,CAACA,KAAK,CAACI,QAAP,IAAmB,CAAC,qBAASJ,KAAT,CAAxB,EAAyC;AACvCA,IAAAA,KAAK,CAACK,iBAAN,CAAwBF,QAAxB,EADuC,CAGzC;AACC,GAJD,MAIO,IAAI,CAACH,KAAK,CAACI,QAAP,IAAmB,CAAC,oBAAQJ,KAAR,CAAxB,EAAwC;AAC7CA,IAAAA,KAAK,CAACK,iBAAN,CAAwBH,OAAO,IAAIC,QAAnC;AACD,GAVsE,CAYvE;;;AACA,MAAIH,KAAK,CAACM,QAAN,CAAeC,WAAnB,EAAgC;AAC9B,2BAAWP,KAAX,EAAkBC,QAAlB;AACD;AACF,CAhBM;AAkBP;AACA;AACA;AACA;;;;;AACO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWR,QAAX,SAA+C;AAAA,MAAxBE,QAAwB,SAAxBA,QAAwB;AAAA,MAAdD,OAAc,SAAdA,OAAc;AAC1E,MAAMQ,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWH,QAAQ,CAACI,IAAT,EAAX,CAAf;AACA,MAAMC,WAAW,GAAG,8BAAaJ,MAAb,KAAwB,sBAASA,MAAT,CAA5C,CAF0E,CAI1E;;AACA,6BAAcD,QAAd,EAAwBR,QAAxB,EAL0E,CAO1E;;AACA,MAAI,CAACS,MAAM,CAACK,IAAP,CAAYC,eAAZ,CAAD,IAA2BF,WAAW,IAAI,CAAC,2BAAaL,QAAb,CAA/C,EAAwE;AACtEC,IAAAA,MAAM,CAACO,OAAP,CAAe,UAACjB,KAAD;AAAA,aAAWA,KAAK,CAACK,iBAAN,CAAwBF,QAAxB,CAAX;AAAA,KAAf;AACA,iCAAgBM,QAAhB,EAA0BR,QAA1B;AACA;AACD,GAZyE,CAc1E;;;AACA,MAAI,CAACS,MAAM,CAACK,IAAP,CAAYG,cAAZ,CAAL,EAA2B;AACzBR,IAAAA,MAAM,CAACO,OAAP,CAAe,UAACjB,KAAD;AAAA,aAAWA,KAAK,CAACK,iBAAN,CAAwBH,OAAO,IAAIC,QAAnC,CAAX;AAAA,KAAf;AACA,iCAAgBM,QAAhB,EAA0BR,QAA1B;AACA;AACD,GAnByE,CAqB1E;;;AACAS,EAAAA,MAAM,CAACS,OAAP,GAAiBF,OAAjB,CAAyB,UAACjB,KAAD,EAAW;AAClCD,IAAAA,QAAQ,CAACC,KAAD,EAAQS,QAAQ,CAACW,GAAT,CAAapB,KAAb,CAAR,EAA6BC,QAA7B,CAAR,CADkC,CAGlC;;AACA,QAAID,KAAK,CAACM,QAAN,CAAeC,WAAnB,EAAgC;AAC9B,mCAAgBE,QAAhB,EAA0BR,QAA1B;AACD;AACF,GAPD;AAQD,CA9BM;AAgCP;AACA;AACA","sourcesContent":["import { isGroupValid } from './fieldsets/helpers.mjs';\nimport { isCheckboxes } from '../fields/checkboxes.mjs';\nimport { isRadios } from '../fields/radios.mjs';\n\nimport {\n  getValue,\n  hasValue,\n  isValid,\n  setInvalid,\n  setValid,\n} from './fields/index.mjs';\n\nimport {\n  setGroupInvalid,\n  setGroupValid,\n} from './fieldsets/index.mjs';\n\n/**\n * Validate form field\n * Automatically mark up as valid/invalid\n */\nexport const validate = (field, { invalid, required } = {}, fieldset) => {\n  setValid(field);\n\n  // Field is empty\n  if (!field.disabled && !getValue(field)) {\n    field.setCustomValidity(required);\n\n  // Field is invalid (via [pattern])\n  } else if (!field.disabled && !isValid(field)) {\n    field.setCustomValidity(invalid || required);\n  }\n\n  // Field failed validation\n  if (field.validity.customError) {\n    setInvalid(field, fieldset);\n  }\n};\n\n/**\n * Validate form fieldset group\n * Automatically mark up as valid/invalid\n */\nexport const validateGroup = (fieldMap, fieldset, { required, invalid }) => {\n  const fields = Array.from(fieldMap.keys());\n  const isCheckable = isCheckboxes(fields) || isRadios(fields);\n\n  // Reset group\n  setGroupValid(fieldMap, fieldset);\n\n  // All fields empty or unchecked? Use group required message\n  if (!fields.some(hasValue) || (isCheckable && !isGroupValid(fieldMap))) {\n    fields.forEach((field) => field.setCustomValidity(required));\n    setGroupInvalid(fieldMap, fieldset);\n    return;\n  }\n\n  // All fields invalid? Use group invalid message\n  if (!fields.some(isValid)) {\n    fields.forEach((field) => field.setCustomValidity(invalid || required));\n    setGroupInvalid(fieldMap, fieldset);\n    return;\n  }\n\n  // Mark up form field as valid/invalid (via [pattern])\n  fields.reverse().forEach((field) => {\n    validate(field, fieldMap.get(field), fieldset);\n\n    // Ensure fieldset displays error\n    if (field.validity.customError) {\n      setGroupInvalid(fieldMap, fieldset);\n    }\n  });\n};\n\n/**\n * Shared utilities\n */\nexport * from './utils/index.mjs';\nexport * from './fields/index.mjs';\nexport * from './fieldsets/index.mjs';\n"],"file":"index.js"}