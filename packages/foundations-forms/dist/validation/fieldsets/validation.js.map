{"version":3,"sources":["../../../src/validation/fieldsets/validation.mjs"],"names":["setGroupValid","fieldMap","fieldset","messageId","id","message","document","getElementById","fields","Array","from","keys","setAttribute","innerHTML","forEach","field","setCustomValidity","classList","remove","setGroupInvalid","fieldsInvalid","filter","validity","customError","validationMessage","length","removeAttribute","add"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,QAAX,EAAwB;AACnD,MAAMC,SAAS,GAAMD,QAAQ,CAACE,EAAf,WAAf;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,SAAxB,CAAhB;AACA,MAAMK,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWT,QAAQ,CAACU,IAAT,EAAX,CAAf,CAHmD,CAKnD;;AACA,MAAIN,OAAJ,EAAa;AACX,qCAAsBH,QAAtB,EAAgCC,SAAhC;AACAE,IAAAA,OAAO,CAACO,YAAR,CAAqB,QAArB,EAA+B,IAA/B;AACAP,IAAAA,OAAO,CAACQ,SAAR,GAAoB,EAApB;AACD,GAVkD,CAYnD;;;AACAL,EAAAA,MAAM,CAACM,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBA,IAAAA,KAAK,CAACC,iBAAN,CAAwB,EAAxB;AACAD,IAAAA,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,oBAAvB;AACD,GAHD;AAID,CAjBM;AAmBP;AACA;AACA;;;;;AACO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAClB,QAAD,EAAWC,QAAX,EAAwB;AACrD,MAAMC,SAAS,GAAMD,QAAQ,CAACE,EAAf,WAAf;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,SAAxB,CAAhB;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZ;AACD,GANoD,CAQrD;;;AACA,MAAMe,aAAa,GAAGX,KAAK,CAACC,IAAN,CAAWT,QAAQ,CAACU,IAAT,EAAX,EACnBU,MADmB,CACZ,UAACN,KAAD;AAAA,WAAWA,KAAK,CAACO,QAAN,CAAeC,WAAf,IAA8BR,KAAK,CAACS,iBAA/C;AAAA,GADY,CAAtB,CATqD,CAYrD;;AACA,MAAIJ,aAAa,CAACK,MAAlB,EAA0B;AACxBpB,IAAAA,OAAO,CAACQ,SAAR,GAAoBO,aAAa,CAAC,CAAD,CAAb,CAAiBI,iBAArC;AACAnB,IAAAA,OAAO,CAACqB,eAAR,CAAwB,QAAxB,EAFwB,CAIxB;;AACA,kCAAmBxB,QAAnB,EAA6BC,SAA7B,EALwB,CAOxB;;AACAiB,IAAAA,aAAa,CAACN,OAAd,CAAsB,UAACC,KAAD;AAAA,aAAWA,KAAK,CACnCE,SAD8B,CACpBU,GADoB,CAChB,oBADgB,CAAX;AAAA,KAAtB;AAED;AACF,CAxBM","sourcesContent":["import { addAriaDescription, removeAriaDescription } from '../utils/aria.mjs';\n\n/**\n * Mark up fieldset as valid\n */\nexport const setGroupValid = (fieldMap, fieldset) => {\n  const messageId = `${fieldset.id}-error`;\n  const message = document.getElementById(messageId);\n  const fields = Array.from(fieldMap.keys());\n\n  // Un-link error message\n  if (message) {\n    removeAriaDescription(fieldset, messageId);\n    message.setAttribute('hidden', true);\n    message.innerHTML = '';\n  }\n\n  // Mark up each form field as valid\n  fields.forEach((field) => {\n    field.setCustomValidity('');\n    field.classList.remove('coop-form__invalid');\n  });\n};\n\n/**\n * Mark up fieldset as invalid\n */\nexport const setGroupInvalid = (fieldMap, fieldset) => {\n  const messageId = `${fieldset.id}-error`;\n  const message = document.getElementById(messageId);\n\n  if (!message) {\n    return;\n  }\n\n  // Find all invalid fields\n  const fieldsInvalid = Array.from(fieldMap.keys())\n    .filter((field) => field.validity.customError && field.validationMessage);\n\n  // Add first error message to fieldset, show\n  if (fieldsInvalid.length) {\n    message.innerHTML = fieldsInvalid[0].validationMessage;\n    message.removeAttribute('hidden');\n\n    // Attach error to fieldset\n    addAriaDescription(fieldset, messageId);\n\n    // Mark fields as invalid\n    fieldsInvalid.forEach((field) => field\n      .classList.add('coop-form__invalid'));\n  }\n};\n"],"file":"validation.js"}