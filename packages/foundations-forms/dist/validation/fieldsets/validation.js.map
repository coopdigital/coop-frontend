{"version":3,"sources":["../../../src/validation/fieldsets/validation.mjs"],"names":["setGroupValid","fieldMap","fieldset","messageId","id","message","document","getElementById","setAttribute","innerHTML","setGroupInvalid","validationMessage","Array","from","keys","reduce","error","field","validity","customError","removeAttribute"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,QAAX,EAAwB;AACnD,MAAMC,SAAS,GAAMD,QAAQ,CAACE,EAAf,WAAf;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,SAAxB,CAAhB,CAFmD,CAInD;;AACA,MAAIE,OAAJ,EAAa;AACX,qCAAsBH,QAAtB,EAAgCC,SAAhC;AACAE,IAAAA,OAAO,CAACG,YAAR,CAAqB,QAArB,EAA+B,IAA/B;AACAH,IAAAA,OAAO,CAACI,SAAR,GAAoB,EAApB;AACD;AACF,CAVM;AAYP;AACA;AACA;;;;;AACO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACT,QAAD,EAAWC,QAAX,EAAwB;AACrD,MAAMC,SAAS,GAAMD,QAAQ,CAACE,EAAf,WAAf;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,SAAxB,CAAhB;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZ;AACD,GANoD,CAQrD;;;AACA,MAAMM,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAWZ,QAAQ,CAACa,IAAT,EAAX,EACvBC,MADuB,CAChB,UAACC,KAAD,EAAQC,KAAR;AAAA,WAAkBD,KAAK,IAAKC,KAAK,CAACC,QAAN,CAAeC,WAAf,IAA8BF,KAAK,CAACN,iBAAhE;AAAA,GADgB,EACoE,EADpE,CAA1B,CATqD,CAYrD;;AACA,MAAIA,iBAAJ,EAAuB;AACrBN,IAAAA,OAAO,CAACI,SAAR,GAAoBE,iBAApB;AACAN,IAAAA,OAAO,CAACe,eAAR,CAAwB,QAAxB,EAFqB,CAIrB;;AACA,kCAAmBlB,QAAnB,EAA6BC,SAA7B;AACD;AACF,CApBM","sourcesContent":["import { addAriaDescription, removeAriaDescription } from '../utils/aria.mjs';\n\n/**\n * Mark up fieldset as valid\n */\nexport const setGroupValid = (fieldMap, fieldset) => {\n  const messageId = `${fieldset.id}-error`;\n  const message = document.getElementById(messageId);\n\n  // Un-link error message\n  if (message) {\n    removeAriaDescription(fieldset, messageId);\n    message.setAttribute('hidden', true);\n    message.innerHTML = '';\n  }\n};\n\n/**\n * Mark up fieldset as invalid\n */\nexport const setGroupInvalid = (fieldMap, fieldset) => {\n  const messageId = `${fieldset.id}-error`;\n  const message = document.getElementById(messageId);\n\n  if (!message) {\n    return;\n  }\n\n  // Find first custom field error\n  const validationMessage = Array.from(fieldMap.keys())\n    .reduce((error, field) => error || (field.validity.customError && field.validationMessage), '');\n\n  // Add first error message to fieldset, show\n  if (validationMessage) {\n    message.innerHTML = validationMessage;\n    message.removeAttribute('hidden');\n\n    // Attach error to fieldset\n    addAriaDescription(fieldset, messageId);\n  }\n};\n"],"file":"validation.js"}