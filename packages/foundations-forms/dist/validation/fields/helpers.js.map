{"version":3,"sources":["../../../src/validation/fields/helpers.mjs"],"names":["getLabel","field","document","querySelector","getAttribute","closest","getLabelOrLegend","fieldset","legend","getValue","value","option","options","selectedIndex","setValue","Array","from","forEach","selected"],"mappings":";;;;;;;;;;;;;AAEA;;AAFA;;AAIA;AACA;AACA;AACO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAWC,QAAQ,CAACC,aAAT,kBAAqCF,KAAK,CAACG,YAAN,CAAmB,IAAnB,CAArC,aAC9BH,KAAK,CAACI,OAAN,CAAc,OAAd,CADmB;AAAA,CAAjB;AAGP;AACA;AACA;;;;;AACO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACL,KAAD,EAAW;AACzC,MAAMM,QAAQ,GAAGN,KAAK,CAACI,OAAN,CAAc,UAAd,CAAjB,CADyC,CAGzC;;AACA,MAAIE,QAAJ,EAAc;AACZ,QAAMC,MAAM,GAAGD,QAAQ,CAACJ,aAAT,CAAuB,QAAvB,CAAf;;AAEA,QAAIK,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD;AACF;;AAED,SAAOR,QAAQ,CAACC,KAAD,CAAf;AACD,CAbM;AAeP;AACA;AACA;;;;;AACO,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACR,KAAD,EAAW;AAAA,MAC3BS,KAD2B,GACjBT,KADiB,CAC3BS,KAD2B;;AAGjC,MAAI,uBAAST,KAAT,CAAJ,EAAqB;AACnB,QAAMU,MAAM,GAAGV,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACY,aAApB,CAAf;AACAH,IAAAA,KAAK,GAAGC,MAAM,IAAIA,MAAM,CAACD,KAAzB;AACD;;AAED,SAAOA,KAAP;AACD,CATM;AAWP;AACA;AACA;;;;;AACO,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAACb,KAAD,EAAQS,KAAR,EAAkB;AACxC,MAAI,uBAAST,KAAT,CAAJ,EAAqB;AACnBc,IAAAA,KAAK,CAACC,IAAN,CAAWf,KAAK,CAACW,OAAjB,EAA0BK,OAA1B,CAAkC,UAACN,MAAD,EAAY;AAC5CA,MAAAA,MAAM,CAACO,QAAP,GAAkBP,MAAM,CAACD,KAAP,KAAiBA,KAAnC;AACD,KAFD;AAGD,GAJD,MAIO;AACLT,IAAAA,KAAK,CAACS,KAAN,GAAcA,KAAd;AACD;AACF,CARM","sourcesContent":["/* eslint-disable no-param-reassign */\n\nimport { isSelect } from '../../fields/selects.mjs';\n\n/**\n * Find field's matching or closest label\n */\nexport const getLabel = (field) => document.querySelector(`label[for=\"${field.getAttribute('id')}\"]`)\n  || field.closest('label');\n\n/**\n * Find field's closest legend or label\n */\nexport const getLabelOrLegend = (field) => {\n  const fieldset = field.closest('fieldset');\n\n  // Prefer legends for fieldsets\n  if (fieldset) {\n    const legend = fieldset.querySelector('legend');\n\n    if (legend) {\n      return legend;\n    }\n  }\n\n  return getLabel(field);\n};\n\n/**\n * Get field value\n */\nexport const getValue = (field) => {\n  let { value } = field;\n\n  if (isSelect(field)) {\n    const option = field.options[field.selectedIndex];\n    value = option && option.value;\n  }\n\n  return value;\n};\n\n/**\n * Set field value\n */\nexport const setValue = (field, value) => {\n  if (isSelect(field)) {\n    Array.from(field.options).forEach((option) => {\n      option.selected = option.value === value;\n    });\n  } else {\n    field.value = value;\n  }\n};\n"],"file":"helpers.js"}