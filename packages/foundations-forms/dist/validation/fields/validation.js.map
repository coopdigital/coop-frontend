{"version":3,"sources":["../../../src/validation/fields/validation.mjs"],"names":["hasValue","field","isValid","checkValidity","setValid","fieldset","messageId","id","message","document","getElementById","setAttribute","innerHTML","setCustomValidity","classList","remove","setInvalid","add","validationMessage","removeAttribute","Map"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAW,CAAC,EAAEA,KAAK,IAAI,CAAC,CAAC,uBAASA,KAAT,CAAb,CAAZ;AAAA,CAAjB;AAEP;AACA;AACA;AACA;;;;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACD,KAAD;AAAA,SAAWD,QAAQ,CAACC,KAAD,CAAR,IAAmBA,KAAK,CAACE,aAAN,EAA9B;AAAA,CAAhB;AAEP;AACA;AACA;;;;;AACO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACH,KAAD,EAAQI,QAAR,EAAqB;AAC3C,MAAMC,SAAS,GAAML,KAAK,CAACM,EAAZ,WAAf;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,SAAxB,CAAhB,CAF2C,CAI3C;;AACA,MAAIE,OAAO,IAAI,CAACH,QAAhB,EAA0B;AACxB,qCAAsBJ,KAAtB,EAA6BK,SAA7B;AACAE,IAAAA,OAAO,CAACG,YAAR,CAAqB,QAArB,EAA+B,IAA/B;AACAH,IAAAA,OAAO,CAACI,SAAR,GAAoB,EAApB;AACD,GAT0C,CAW3C;;;AACAX,EAAAA,KAAK,CAACY,iBAAN,CAAwB,EAAxB;AACAZ,EAAAA,KAAK,CAACa,SAAN,CAAgBC,MAAhB,CAAuB,oBAAvB;AACD,CAdM;AAgBP;AACA;AACA;;;;;AACO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACf,KAAD,EAAQI,QAAR,EAAqB;AAC7C,MAAMC,SAAS,GAAML,KAAK,CAACM,EAAZ,WAAf;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,SAAxB,CAAhB,CAF6C,CAI7C;;AACAL,EAAAA,KAAK,CAACa,SAAN,CAAgBG,GAAhB,CAAoB,oBAApB,EAL6C,CAO7C;;AACA,MAAIT,OAAO,IAAI,CAACH,QAAhB,EAA0B;AACxBG,IAAAA,OAAO,CAACI,SAAR,GAAoBX,KAAK,CAACiB,iBAA1B;AACAV,IAAAA,OAAO,CAACW,eAAR,CAAwB,QAAxB,EAFwB,CAIxB;;AACA,kCAAmBlB,KAAnB,EAA0BK,SAA1B;AACD,GAND,MAMO,IAAID,QAAJ,EAAc;AACnB,qCAAgB,IAAIe,GAAJ,CAAQ,CAAC,CAACnB,KAAD,CAAD,CAAR,CAAhB,EAAoCI,QAApC;AACD;AACF,CAjBM","sourcesContent":["import { addAriaDescription, removeAriaDescription } from '../utils/aria.mjs';\nimport { setGroupInvalid } from '../fieldsets/validation.mjs';\nimport { getValue } from './helpers.mjs';\n\n/**\n * Check form field has value\n * (e.g. via [value] attribute)\n */\nexport const hasValue = (field) => !!(field && !!getValue(field));\n\n/**\n * Check form field is valid\n * (e.g. via [pattern] attribute)\n */\nexport const isValid = (field) => hasValue(field) && field.checkValidity();\n\n/**\n * Mark up form field as valid\n */\nexport const setValid = (field, fieldset) => {\n  const messageId = `${field.id}-error`;\n  const message = document.getElementById(messageId);\n\n  // Un-link error message\n  if (message && !fieldset) {\n    removeAriaDescription(field, messageId);\n    message.setAttribute('hidden', true);\n    message.innerHTML = '';\n  }\n\n  // Mark field as valid\n  field.setCustomValidity('');\n  field.classList.remove('coop-form__invalid');\n};\n\n/**\n * Mark up form field as invalid\n */\nexport const setInvalid = (field, fieldset) => {\n  const messageId = `${field.id}-error`;\n  const message = document.getElementById(messageId);\n\n  // Mark field as invalid\n  field.classList.add('coop-form__invalid');\n\n  // Fill error message, show\n  if (message && !fieldset) {\n    message.innerHTML = field.validationMessage;\n    message.removeAttribute('hidden');\n\n    // Attach error to field\n    addAriaDescription(field, messageId);\n  } else if (fieldset) {\n    setGroupInvalid(new Map([[field]]), fieldset);\n  }\n};\n"],"file":"validation.js"}