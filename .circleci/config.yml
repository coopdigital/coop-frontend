version: 2.1

parameters:
  is-content-update:
    type: boolean
    default: false
  entryID:
    type: string
    default: "unknown"

jobs:
  build_packages:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: 'Update NPM'
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: build-cache-{{ checksum "package.json" }}
      - run:
          name: 'Install NPM dependencies'
          command: npm install
      - save_cache:
          key: build-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: 'Build all packages'
          command: npm run build:all


  build:
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - checkout
      - run:
          name: update npm
          command: 'sudo npm install -g npm@latest'
          working_directory: ~/project/design-system
      - restore_cache:
          key: site-cache-{{ checksum "design-system/package.json" }}
      - run:
          name: Install bundler
          command: gem install bundler
          working_directory: ~/project/design-system
      - restore_cache:
          key: gemfile-{{ checksum "design-system/Gemfile.lock" }}
      - run:
          name: Install gems
          command: bundle install
          working_directory: ~/project/design-system
      - run:
          name: Install node modules
          command: npm install
          working_directory: ~/project/design-system
      - run:
          name: Build site
          command: npm run build
          working_directory: ~/project/design-system
      - save_cache:
          key: gemfile-{{ checksum "design-system/Gemfile.lock" }}
          paths:
            - vendor/bundle
      - save_cache:
          key: site-cache-{{ checksum "design-system/package.json" }}
          paths:
            - ./node_modules

  deploy:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - when:
            condition: << pipeline.parameters.is-content-update >>
            steps:
              - run: |
                     git commit --allow-empty -m "Updated Contentful entry: << pipeline.parameters.entryID >>"
      - run:
          name: 'Deploy to Heroku'
          command: git subtree push --prefix design-system https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build_packages_and_site:
    jobs:
      - build_packages
      - build:
          requires:
            - build_packages
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
